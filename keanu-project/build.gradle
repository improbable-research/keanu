buildscript {
    ext.kotlin_version = '1.2.31'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    id 'maven'
}

group = 'io.improbable'
archivesBaseName = "keanu"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {

    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'org.nd4j:nd4j-native-platform:1.0.0-alpha'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile group: 'com.opencsv', name: 'opencsv', version: '4.2'
    compile group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.10'

    //testing
    testCompile 'junit:junit:4.12'
    testCompile 'org.jfree:jfreechart:1.0.19'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.15.0'
    testCompile 'org.hamcrest:hamcrest-library:1.3'

}

test {
    systemProperty "io.improbable.keanu.defaultRandom.seed", '1'
    systemProperty "dtype" , 'double'
}

// Add default user/pass so it's not needed if only building and not publishing to Nexus
if (!hasProperty('nexusUser')) {
    ext.nexusUser = ''
}

if (!hasProperty('nexusPassword')) {
    ext.nexusPassword = ''
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: nexusUser, password: nexusPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: nexusUser, password: nexusPassword)
            }

            pom.project {
                name 'Keanu'
                packaging 'jar'
                description 'A probabilistic approach from an Improbabilistic company'
                url 'https://github.com/improbable-research/keanu'

                scm {
                    connection 'scm:git@github.com:improbable-research/keanu.git'
                    developerConnection 'scm:git@github.com:improbable-research/keanu.git'
                    url 'https://github.com/improbable-research/keanu.git'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        id 'caleb'
                        name 'Caleb Walker'
                        email 'caleb@improbable.io'
                    }
                }
            }
        }
    }
}

apply plugin: 'kotlin'

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

if (project.hasProperty("signing.keyId")) {
    apply plugin: 'signing'
    signing {
        sign configurations.archives
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

//Break build on javadoc warnings
tasks.withType(Javadoc) {
    options.addStringOption('Xwerror', '-quiet')
}

artifacts {
    archives javadocJar, sourcesJar
}
